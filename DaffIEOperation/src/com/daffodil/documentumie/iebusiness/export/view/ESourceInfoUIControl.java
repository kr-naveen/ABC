/*
 * ESourceInfoIOControl.java
 *
 * Created on 09 July 2008, 11:49
 */

package com.daffodil.documentumie.iebusiness.export.view;

import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import com.daffodil.documentumie.dctm.exception.DDfException;
import com.daffodil.documentumie.iebusiness.AbstractUIControl;
import com.daffodil.documentumie.iebusiness.export.bean.ExportUIInfoBean;

/**
 *
 * @author  Administrator
 */
public class ESourceInfoUIControl extends AbstractUIControl{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	String imageLocation;
	String showMessage;
	StringBuffer errorMessage;
	/** Creates new form ESourceInfoIOControl */
	public ESourceInfoUIControl() {
		initComponents();
		initUI();
	}
	ButtonGroup buttonGroup1;
	ButtonGroup buttonGroup2; 
	@Override
	protected void initUI() {
		super.initUI();
		buttonGroup1 = new ButtonGroup();
		buttonGroup1.add(native_JRadioButton);
		buttonGroup1.add(rendition_JRadioButton);
		buttonGroup1.add(both_JRadioButton);
		//	native_JRadioButton.setSelected(true);

		buttonGroup2 = new ButtonGroup();
		buttonGroup2.add(csv_JRadioButton);
		buttonGroup2.add(xls_JRadioButton);
		buttonGroup2.add(xml_JRadioButton);
		//	xls_JRadioButton.setSelected(true);
	
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */

	private void initComponents() {

		java.awt.GridBagConstraints gridBagConstraints;

		metadataOnly_JCheckBox = new javax.swing.JCheckBox();
		metadataOnly_JLabel = new javax.swing.JLabel();
		objectType_JLabel = new javax.swing.JLabel();
		objectType_JComboBox = new javax.swing.JComboBox();
		ReportType_JLabel = new javax.swing.JLabel();
		exportType_JLabel = new javax.swing.JLabel();
		ReportType_JPanel = new javax.swing.JPanel();
		csv_JRadioButton = new javax.swing.JRadioButton();
		xls_JRadioButton = new javax.swing.JRadioButton();
		xml_JRadioButton = new javax.swing.JRadioButton();
		exportType_JPanel = new javax.swing.JPanel();
		both_JRadioButton = new javax.swing.JRadioButton();
		rendition_JRadioButton = new javax.swing.JRadioButton();
		native_JRadioButton = new javax.swing.JRadioButton();
		allVersion_JLabel = new javax.swing.JLabel();
		allVersions_JCheckBox = new javax.swing.JCheckBox();
		exportInZip_JLabel = new JLabel();
		exportInZip_JCheckBox = new JCheckBox();

		setOpaque(false);
		setPreferredSize(new java.awt.Dimension(330, 355));
		setLayout(new java.awt.GridBagLayout());

		metadataOnly_JCheckBox.setOpaque(false);
		metadataOnly_JCheckBox.setPreferredSize(new java.awt.Dimension(20, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		add(metadataOnly_JCheckBox, gridBagConstraints);

		metadataOnly_JLabel.setOpaque(false);
		metadataOnly_JLabel.setText("Metadata Only");
		metadataOnly_JLabel.setPreferredSize(new java.awt.Dimension(85, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 4;
		add(metadataOnly_JLabel, gridBagConstraints);

		objectType_JLabel.setOpaque(false);
		objectType_JLabel.setText("Object Type");
		objectType_JLabel.setPreferredSize(new java.awt.Dimension(85, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		add(objectType_JLabel, gridBagConstraints);

		// objectType_JComboBox.setOpaque(false);
		objectType_JComboBox.setOpaque(false);
		objectType_JComboBox.setPreferredSize(new java.awt.Dimension(200, 20));
		/*objectType_JComboBox.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jComboBox1ActionPerformed(evt);
	            }
	        });*/
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		add(objectType_JComboBox, gridBagConstraints);

		ReportType_JLabel.setOpaque(false);
		ReportType_JLabel.setText("Report Type");
		ReportType_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		add(ReportType_JLabel, gridBagConstraints);

		exportType_JLabel.setText("Export Type");
		exportType_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		add(exportType_JLabel, gridBagConstraints);

		ReportType_JPanel.setOpaque(false);
		ReportType_JPanel.setLayout(new java.awt.GridBagLayout());

		csv_JRadioButton.setOpaque(false);
		csv_JRadioButton.setText("CSV");
		csv_JRadioButton.setPreferredSize(new java.awt.Dimension(65, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		ReportType_JPanel.add(csv_JRadioButton, gridBagConstraints);

		xls_JRadioButton.setOpaque(false);
		xls_JRadioButton.setText("Excel");
		xls_JRadioButton.setPreferredSize(new java.awt.Dimension(85, 20));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		ReportType_JPanel.add(xls_JRadioButton, gridBagConstraints);

		xml_JRadioButton.setOpaque(false);
		xml_JRadioButton.setText("XML");
		xml_JRadioButton.setPreferredSize(new java.awt.Dimension(65, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		ReportType_JPanel.add(xml_JRadioButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		add(ReportType_JPanel, gridBagConstraints);

		exportType_JPanel.setLayout(new java.awt.GridBagLayout());
		exportType_JPanel.setOpaque(false);

		both_JRadioButton.setOpaque(false);
		both_JRadioButton.setText("Both");
		both_JRadioButton.setPreferredSize(new java.awt.Dimension(65, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		exportType_JPanel.add(both_JRadioButton, gridBagConstraints);

		rendition_JRadioButton.setOpaque(false);
		rendition_JRadioButton.setText("Renditions");
		rendition_JRadioButton.setPreferredSize(new java.awt.Dimension(85, 20));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		exportType_JPanel.add(rendition_JRadioButton, gridBagConstraints);

		native_JRadioButton.setOpaque(false);
		native_JRadioButton.setText("Native");
		native_JRadioButton.setPreferredSize(new java.awt.Dimension(65, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		exportType_JPanel.add(native_JRadioButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		add(exportType_JPanel, gridBagConstraints);

		allVersion_JLabel.setText("All Version");
		allVersion_JLabel.setPreferredSize(new java.awt.Dimension(85, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		add(allVersion_JLabel, gridBagConstraints);

		allVersions_JCheckBox.setOpaque(false);
		allVersions_JCheckBox.setPreferredSize(new java.awt.Dimension(20, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		add(allVersions_JCheckBox, gridBagConstraints);

		exportInZip_JLabel.setText("Compress Content");
		exportInZip_JLabel.setPreferredSize(new java.awt.Dimension(110, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 5;
		add(exportInZip_JLabel, gridBagConstraints);
		exportInZip_JCheckBox.setOpaque(false);
		exportInZip_JCheckBox.setPreferredSize(new java.awt.Dimension(20, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		add(exportInZip_JCheckBox, gridBagConstraints);	
	}// </editor-fold>


	// Variables declaration - do not modify
	private javax.swing.JPanel ESourceInfo_JPanel;
	private javax.swing.JCheckBox allVersions_JCheckBox;
	private javax.swing.JLabel allVersion_JLabel;
	private javax.swing.JRadioButton both_JRadioButton;
	//private javax.swing.JPanel checkBox_JPanel;
	private javax.swing.JRadioButton csv_JRadioButton;
	private javax.swing.JLabel exportType_JLabel;
	private javax.swing.JPanel exportType_JPanel;
	private javax.swing.JLabel ReportType_JLabel;
	private javax.swing.JPanel ReportType_JPanel;
	private javax.swing.JComboBox objectType_JComboBox;
	private javax.swing.JLabel objectType_JLabel;
	private javax.swing.JCheckBox metadataOnly_JCheckBox;
	private javax.swing.JLabel metadataOnly_JLabel;
	private javax.swing.JRadioButton native_JRadioButton;
	private javax.swing.JPanel objectType_JPanel;
	private javax.swing.JRadioButton rendition_JRadioButton;
	private javax.swing.JRadioButton xls_JRadioButton;
	private javax.swing.JRadioButton xml_JRadioButton;
	private JCheckBox exportInZip_JCheckBox;
	private JLabel exportInZip_JLabel;

	@Override
	public String getImageLocation() {
		if(imageLocation==null){
			imageLocation = "/com/daffodil/documentumie/iebusiness/export/view/images/heading_e_object.jpg";
		}
		return imageLocation;
	}

	@Override
	public String getShowMessage() {
		if(showMessage==null){
			showMessage = "Select the object type of the content.";
		}
		return showMessage;
	}

	@Override
	protected void postInilize() {
		String reportType = (csv_JRadioButton.isSelected() ? "csv" : (xls_JRadioButton.isSelected() ? "xls" : "xml"));
		String exportType = (native_JRadioButton.isSelected()? "native" : (rendition_JRadioButton.isSelected() ? "rendition" : "both"));
		getExportUIInfoBean().setObjectType((String) objectType_JComboBox.getSelectedItem());
		getExportUIInfoBean().setAllVersion(allVersions_JCheckBox.isSelected());
		getExportUIInfoBean().setOnlyMetadata(metadataOnly_JCheckBox.isSelected());
		getExportUIInfoBean().setReportType(reportType);
		getExportUIInfoBean().setExportType(exportType);
		getExportUIInfoBean().setExportIntoZIP(exportInZip_JCheckBox.isSelected());
	}

	@Override
	protected void preInilize() {
		showObjectType();
		String objectType = getExportUIInfoBean().getObjectType();
		objectType_JComboBox.setSelectedItem(objectType);
		allVersions_JCheckBox.setSelected(getExportUIInfoBean().isAllVersion());
		metadataOnly_JCheckBox.setSelected(getExportUIInfoBean().isOnlyMetadata());
		exportInZip_JCheckBox.setSelected(getExportUIInfoBean().isExportIntoZIP());
		
		String reportType = getExportUIInfoBean().getReportType();
		if(reportType == null|| "".equalsIgnoreCase(reportType.trim()) || reportType.equalsIgnoreCase("csv") ){
			csv_JRadioButton.setSelected(true);
			
		}else{if(reportType.equalsIgnoreCase("xml")){
			xml_JRadioButton.setSelected(true);
		}else{
			if("xls".equalsIgnoreCase(reportType.trim())){
			xls_JRadioButton.setSelected(true);
		}
		}
		}
		String exportType = getExportUIInfoBean().getExportType();
		if(exportType == null|| "".equalsIgnoreCase(exportType.trim()) || exportType.equalsIgnoreCase("native") ){
			native_JRadioButton.setSelected(true);
		}else{if(exportType.equalsIgnoreCase("rendition")){
			rendition_JRadioButton.setSelected(true);
		}else{if(exportType.equalsIgnoreCase("both")){
			both_JRadioButton.setSelected(true);
		}
		}
		}
	}


	@Override
	protected StringBuffer validateUIInputs() {
		StringBuffer sourceInfoErrorMessage = null;
		String objectType = (String) objectType_JComboBox.getSelectedItem();
		if(objectType == null || "".equalsIgnoreCase(objectType.trim())){
			if(sourceInfoErrorMessage == null){
				sourceInfoErrorMessage  = new StringBuffer();
				sourceInfoErrorMessage.append("Please Enter ");
			}
			sourceInfoErrorMessage.append("Object Type");
		}
		return sourceInfoErrorMessage;
	}

	private ExportUIInfoBean getExportUIInfoBean() {
		return (ExportUIInfoBean) getUiInfoBean();
	}


	private void showObjectType() {
		objectType_JComboBox.removeAllItems();

		try {
			List list = getCSServiceProvider().getAvailableObjecTypes();
			objectType_JComboBox.addItem("");
			for (int i = 0; i < list.size(); i++) {
				objectType_JComboBox.addItem(list.get(i));
			}
			errorMessage = null;
		} catch (DDfException e) {
			if(errorMessage == null){
				errorMessage = new StringBuffer();
			}
			errorMessage.append(e.getMessage());
			getIEMessageUtility().showMessageDialog(e.getMessage(), e.getCause());
		}
	}

	@Override
	protected StringBuffer errorMessage() {
		return errorMessage;
	}

}
