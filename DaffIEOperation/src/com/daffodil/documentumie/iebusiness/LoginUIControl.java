/*
 * NewJPanel.java
 *
 * Created on 26 June 2008, 13:09
 */

package com.daffodil.documentumie.iebusiness;

import java.util.List;

import com.daffodil.documentumie.dctm.exception.DDfException;

/**
 * 
 * @author Administrator
 */
public class LoginUIControl extends AbstractUIControl {

	String imageLocation;

	String showMessage;

	StringBuffer errorMessage;

	/** Creates new form NewJPanel */

	public LoginUIControl() {

		initComponents();
		initlizeUI();

	}

	@Override
	protected void initUI() {
		super.initUI();
	}

	private void showReposiotry() {
		repository_JComboBox.removeAllItems();
		List list;
		try {
			list = getCSServiceProvider().getAvailableRepositories();

			for (int i = 0; i < list.size(); i++) {
				repository_JComboBox.addItem(list.get(i));
			}
			errorMessage = null;
		} catch (DDfException e) {
			if(errorMessage == null){
			errorMessage = new StringBuffer();
			}
			errorMessage.append(e.getMessage());
			getIEMessageUtility().showMessageDialog("Unable to connect to the DockBroker", new Throwable(e.getMessage()));
		}
	}

	protected StringBuffer errorMessage() {
		return errorMessage;
	}

	@Override
	public String getImageLocation() {
		imageLocation = "/com/daffodil/documentumie/iebusiness/images/heading_login.jpg";
		return imageLocation;
	}

	@Override
	public String getShowMessage() {
		showMessage = "Select repository where you want to import data and provide all " + "\n" + "login credentials required for the respective repository.";
		return showMessage;
	}

	@Override
	public void postInilize() {
		getUIInfoBean().setRepository(
				(String) repository_JComboBox.getSelectedItem());
		getUIInfoBean().setUserName(username_JTextField.getText());
		getUIInfoBean().setPassword(password_JPasswordField.getText());
		getUIInfoBean().setDomain(domain_JTextField.getText());
		password_JPasswordField.setText(null);
	}

	@Override
	protected void postValidateAction() {
		super.postValidateAction();
		String repository = null;
		String username = null;
		String password = null;
		String domain = null;
		repository = (String) repository_JComboBox.getSelectedItem();
		username = username_JTextField.getText();
		password = password_JPasswordField.getText();
		domain = domain_JTextField.getText();
		try {
			getCSServiceProvider().login(repository, username, password, domain);
			errorMessage = null;
		} catch (DDfException e) {
			errorMessage = new StringBuffer();
			errorMessage.append(e.getMessage());
			getIEMessageUtility().showMessageDialog(e.getMessage(), e.getCause());
			password_JPasswordField.setText("");
		}
	}

	@Override
	protected void preInilize() {
		showReposiotry();
		String repository = getUIInfoBean().getRepository();
		String username = getUIInfoBean().getUserName();
		String domain = getUIInfoBean().getDomain();
		repository_JComboBox.setSelectedItem(repository);
		username_JTextField.setText(username);
		password_JPasswordField.setText("");
		domain_JTextField.setText(domain);
	}

	@Override
	public StringBuffer validateUIInputs() {
		StringBuffer loginErrorMessage = null;
		String repository = (String) repository_JComboBox.getSelectedItem();
		String username = username_JTextField.getText();
		String password = password_JPasswordField.getText();

		if (repository == null || "".equalsIgnoreCase(repository.trim())) {
			if (loginErrorMessage == null) {
				loginErrorMessage = new StringBuffer();
				loginErrorMessage.append("Please Enter ");
			}
			// loginErrorMessage = new StringBuffer();
			loginErrorMessage.append("Repository");
		}

		if (username == null || "".equalsIgnoreCase(username.trim())) {
			if (loginErrorMessage == null) {
				loginErrorMessage = new StringBuffer();
				loginErrorMessage.append("Please Enter ");
			} else
				loginErrorMessage.append(", ");

			loginErrorMessage.append("Username");

		}
		if (password == null || "".equalsIgnoreCase(password.trim())) {
			if (loginErrorMessage == null) {
				loginErrorMessage = new StringBuffer();
				loginErrorMessage.append("Please Enter ");
			} else
				loginErrorMessage.append(", ");

			loginErrorMessage.append("Password");
		}

		return loginErrorMessage;
	}

	private UIInfoBean getUIInfoBean() {
		return (UIInfoBean) getUiInfoBean();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		repository_JLabel = new javax.swing.JLabel();
		password_JLabel = new javax.swing.JLabel();
		username_JLabel = new javax.swing.JLabel();
		domain_JLabel = new javax.swing.JLabel();
		repository_JComboBox = new javax.swing.JComboBox();
		username_JTextField = new javax.swing.JTextField();
		domain_JTextField = new javax.swing.JTextField();
		password_JPasswordField = new javax.swing.JPasswordField();

		setPreferredSize(new java.awt.Dimension(370, 355));
		setLayout(new java.awt.GridBagLayout());

		repository_JLabel.setText("Repository");
		repository_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
		add(repository_JLabel, gridBagConstraints);

		password_JLabel.setText("Password");
		password_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
		add(password_JLabel, gridBagConstraints);

		username_JLabel.setText("Username");
		username_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
		add(username_JLabel, gridBagConstraints);

		domain_JLabel.setText("Domain");
		domain_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
		add(domain_JLabel, gridBagConstraints);

		repository_JComboBox.setOpaque(false);
		repository_JComboBox.setBackground(new java.awt.Color(255, 255, 255));
		repository_JComboBox.setPreferredSize(new java.awt.Dimension(180, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		add(repository_JComboBox, gridBagConstraints);

		username_JTextField.setPreferredSize(new java.awt.Dimension(180, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		add(username_JTextField, gridBagConstraints);

		domain_JTextField.setPreferredSize(new java.awt.Dimension(180, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		add(domain_JTextField, gridBagConstraints);

		password_JPasswordField
				.setPreferredSize(new java.awt.Dimension(180, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		add(password_JPasswordField, gridBagConstraints);
		
		domain_JLabel.setVisible(false);
		domain_JTextField.setVisible(false);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField domain_JTextField;

	private javax.swing.JLabel domain_JLabel;

	private javax.swing.JPasswordField password_JPasswordField;

	private javax.swing.JLabel password_JLabel;

	private javax.swing.JComboBox repository_JComboBox;

	private javax.swing.JLabel repository_JLabel;

	private javax.swing.JTextField username_JTextField;

	private javax.swing.JLabel username_JLabel;

	// End of variables declaration//GEN-END:variables
	public void setImageLocation(String imageLocation) {
		this.imageLocation = imageLocation;
	}

	public void setShowMessage(String showMessage) {
		this.showMessage = showMessage;
	}

}
