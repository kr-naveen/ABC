/*
 * IRunOptionUIControl.java
 *
 * Created on 27 June 2008, 09:04
 */

package com.daffodil.documentumie.iebusiness.pimport.view;

import java.awt.GridBagConstraints;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import com.daffodil.documentumie.iebusiness.AbstractUIControl;
import com.daffodil.documentumie.iebusiness.pimport.bean.ImportUIInfoBean;

/**
 *
 * @author  Administrator
 */
public class IPerformUIControl extends AbstractUIControl {

	String imageLocation;
	String showMessage;
	StringBuffer progressBuffer;
	/** Creates new form IRunOptionUIControl */
	public IPerformUIControl() {
		initComponents();
		initlizeUI();
	}

	@Override
	protected void initUI() {
		super.initUI();

	}


	private ImportUIInfoBean getImportUIInfoBean(){
		return (ImportUIInfoBean)getUiInfoBean();
	}

	@Override
	public void postInilize() {
	}

	@Override
	protected void preInilize() {
		String errorMessage = null;
		boolean fileExistanceFlag = checkFileExistance(getImportUIInfoBean().getSourceFileLocation());
		if (!fileExistanceFlag) {
				getIEMessageUtility().showMessageDialog(errorMessage, null);
				errorMessage = "Source input File does not existed";
				errorMessage = null;
		}else{
		renderImportImage("/com/daffodil/documentumie/iebusiness/pimport/view/images/import_performing.gif");
		}
	}

	private boolean checkFileExistance(String file_path) {
		boolean exist_not;
		if (file_path == null || "".equals(file_path != null ? file_path.trim() : "")) {
			return true;
		}
		File contentfile = new File(file_path);
		exist_not = contentfile.exists();
		return exist_not;
	}
	
	@Override
	public StringBuffer validateUIInputs() {
		return null;
	}

	@Override
	public String getImageLocation() {
		imageLocation = "/com/daffodil/documentumie/iebusiness/pimport/view/images/heading_performing.jpg";
		return imageLocation;
	}

	@Override
	public String getShowMessage() {
		showMessage = "Importing the data to repository.";
		return showMessage;
	}

	public void setinitialProgressValue(int maxVal) {
		importProgressBar.setMinimum(0);
		importProgressBar.setMaximum(maxVal);
		importing_JLabel.setText("0 out of " + maxVal);
	}

	public void updateProgressBar(int val, String fileName){
		importProgressBar.setValue(val);
		progressBuffer = new StringBuffer();
		progressBuffer.append(val).append(" out of ").append(importProgressBar.getMaximum());

		if(fileName!=null){
			
			if(fileName.length()>30){
				String s1 = fileName.substring(0, 24);
				String s2 = fileName.substring(fileName.length()-5);
				fileName = s1 + "~" + s2 ;
			}
			
			progressBuffer.append("( Importing :").append(fileName).append(")");
		}

		importing_JLabel.setText(progressBuffer.toString());
	}

	public void renderImportImage(String path) {

		GridBagConstraints gridBagConstraints = null;
		if (gridBagConstraints == null) {
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 0;
			gridBagConstraints.gridheight = 1;
			gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
			gridBagConstraints.weightx = 1.0;
			gridBagConstraints.weighty = 1.0;
			gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 0);
		}
		importImage_JPanel.removeAll();
		importImage_JPanel.add(new JLabel(new ImageIcon(this.getClass().getResource(path))),
				gridBagConstraints);
		importImage_JPanel.repaint();
		getMainUIControl().getMainFrame().invalidate();
		getMainUIControl().getMainFrame().validate();
		getMainUIControl().getMainFrame().repaint();
		
	}


	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		importImage_JPanel = new javax.swing.JPanel();
		importLabel_JPanel = new javax.swing.JPanel();
		importing_JLabel = new javax.swing.JLabel();
		importProgressBar_JPanel = new javax.swing.JPanel();
		importProgressBar = new javax.swing.JProgressBar();

		setPreferredSize(new java.awt.Dimension(370, 355));
		setLayout(new java.awt.GridBagLayout());

		importImage_JPanel.setOpaque(false);
		importImage_JPanel.setMaximumSize(new java.awt.Dimension(370, 290));
		importImage_JPanel.setPreferredSize(new java.awt.Dimension(370, 290));
		importImage_JPanel.setLayout(new java.awt.GridBagLayout());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 29.0;
//		gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
		add(importImage_JPanel, gridBagConstraints);

		importLabel_JPanel.setOpaque(false);
		importLabel_JPanel.setPreferredSize(new java.awt.Dimension(330, 21));
		importLabel_JPanel.setLayout(new java.awt.GridBagLayout());

		importing_JLabel.setText("Importing");
		importing_JLabel.setPreferredSize(new java.awt.Dimension(80, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		importLabel_JPanel.add(importing_JLabel, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 20, 0, 20);
		add(importLabel_JPanel, gridBagConstraints);

		importProgressBar_JPanel.setOpaque(false);
		importProgressBar_JPanel.setPreferredSize(new java.awt.Dimension(330, 21));
		importProgressBar_JPanel.setLayout(new java.awt.GridBagLayout());

		importProgressBar.setMinimumSize(new java.awt.Dimension(100, 20));
		importProgressBar.setPreferredSize(new java.awt.Dimension(300, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
		importProgressBar_JPanel.add(importProgressBar, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.insets = new java.awt.Insets(5, 20, 20, 20);
		add(importProgressBar_JPanel, gridBagConstraints);
	}// </editor-fold>//GEN-END:initComponents


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel importImage_JPanel;
	private javax.swing.JPanel importLabel_JPanel;
	private javax.swing.JProgressBar importProgressBar;
	private javax.swing.JPanel importProgressBar_JPanel;
	private javax.swing.JLabel importing_JLabel;
	@Override
	protected StringBuffer errorMessage() {
		// TODO Auto-generated method stub
		return null;
	}

	// End of variables declaration//GEN-END:variables


}
